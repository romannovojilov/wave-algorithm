{"version":3,"sources":["wave-algorithm/helpers.ts","components/App/helpers/generate-matrix.ts","components/App/index.tsx","wave-algorithm/index.ts","components/App/helpers/get-scheme.ts","reportWebVitals.ts","index.tsx"],"names":["createIndexGetter","xDiff","yDiff","x","y","getTopIndex","getBottomIndex","getLeftIndex","getRightIndex","getCell","matrix","cell","Error","compareIndex","x1","y1","x2","y2","cloneMatrix","map","column","generateMatrix","sizeX","sizeY","Array","fill","c","columnIndex","cellIndex","type","value","initialMatrix","allowedTypes","getCellStyles","index","startIndex","finishIndex","isStartCell","isFinishCell","background","color","getColor","cursor","includes","App","useState","setMatrix","setStartIndex","setFinishIndex","selectPoint","startCell","finishCell","wavedMatrix","clearMatrixWave","waveQueue","currentIndex","shift","currentCell","console","log","freeIndexes","filter","isFree","push","reverse","length","way","passedIndexes","passedIndex","minIndex","forEach","wayIndex","waveAlgorithm","setSizeX","setSizeY","changeSize","e","target","name","size","Number","isNaN","className","min","max","onChange","disabled","onClick","scheme","matrixBuff","matrixCell","alert","addScheme","style","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.76458195.chunk.js","sourcesContent":["import { ICell, TIndex, TMatrix } from './models';\n\nconst createIndexGetter = ([xDiff, yDiff]: TIndex) =>\n    ([x, y]: TIndex): TIndex => [x+xDiff, y+yDiff];\n\nexport const getTopIndex = createIndexGetter([0, -1]);\nexport const getBottomIndex = createIndexGetter([0, 1]);\nexport const getLeftIndex = createIndexGetter([-1, 0]);\nexport const getRightIndex = createIndexGetter([1, 0]);\n\n/**\n * Получить ячейку матрицы по координатам\n * @param matrix - Матрица\n * @param index - Координаты\n * @returns Ячейка\n * @throws Ячейка по заданным координатам не найдена\n */\nexport const getCell = (matrix: TMatrix, [x, y]: TIndex): ICell | never => {\n    const cell = matrix[x][y];\n    if (!cell) throw new Error(`Ячейка по координатам [${x}, ${y}] не найдена`);\n    return cell;\n};\n\n/**\n * Сравнить индексы\n * @param index1 - Первый индекс\n * @param index2 - Второй индекс\n */\n export const compareIndex = ([x1, y1]: TIndex, [x2, y2]: TIndex): boolean => x1 === x2 && y1 === y2;\n\n /**\n  * Глубокое клонирование матрицы\n  */\n export const cloneMatrix = (matrix: TMatrix): TMatrix => matrix.map(column => column.map(cell => ({...cell})));\n\n /**\n  * Очистить волну\n  */\n export const clearMatrixWave = (matrix: TMatrix): TMatrix => matrix.map(column => column.map(cell => {\n     if (cell.type === 'passed') {\n         cell.type = 'free';\n         cell.value = 0;\n    }\n     return cell;\n }));","import { TMatrix } from '../../../wave-algorithm/models';\n\nexport const generateMatrix = (sizeX: number, sizeY: number): TMatrix => \n    new Array(sizeX).fill([]).map((c, columnIndex) => new Array(sizeY).fill({}).map((c, cellIndex) => {\n        const edge = columnIndex === 0\n            || columnIndex === sizeX - 1\n            || cellIndex === 0\n            || cellIndex === sizeY - 1;\n        return {\n            type: edge ? 'forbidden': 'free',\n            value: 0,\n        }\n    }));","import React, { ChangeEvent, useState } from 'react';\n\nimport type { ICell, TIndex, TMatrix } from '../../wave-algorithm/models';\nimport { cloneMatrix, compareIndex, getCell } from '../../wave-algorithm/helpers';\nimport { waveAlgorithm } from '../../wave-algorithm';\n\nimport { generateMatrix } from './helpers/generate-matrix';\nimport { getScheme } from './helpers/get-scheme';\nimport './styles.css';\n\nconst DEFAULT_SIZE_X = 50;\nconst DEFAULT_SIZE_Y = 35;\n\nconst initialMatrix: TMatrix = generateMatrix(DEFAULT_SIZE_X, DEFAULT_SIZE_Y);\nconst allowedTypes: ICell['type'][] = ['free', 'passed'];\n\nconst getColor = (type: ICell['type']): string | undefined => {\n  switch(type) {\n    case 'forbidden': return 'gray';\n    case 'way': return 'green';\n    case 'way-forbidden': return 'white';\n    default: return undefined;\n  }\n};\n\nconst getCellStyles = (matrix: TMatrix, index: TIndex, startIndex: TIndex | null, finishIndex: TIndex | null) => {\n  const cell = getCell(matrix, index);\n  const isStartCell = startIndex ? compareIndex(index, startIndex) : false;\n  const isFinishCell = finishIndex ? compareIndex(index, finishIndex) : false;\n\n  const color = isStartCell || isFinishCell ? 'purple' : cell.color || getColor(cell.type)\n\n  return {\n    background: color,\n    cursor: allowedTypes.includes(cell.type) ? 'pointer': 'not-allowed',\n  };\n};\n\nfunction App() {\n\n  const [matrix, setMatrix] = useState<TMatrix>(initialMatrix);\n  const [startIndex, setStartIndex] = useState<TIndex | null>(null);\n  const [finishIndex, setFinishIndex] = useState<TIndex | null>(null);\n\n  const selectPoint = (index: TIndex) => {\n    const cell = getCell(matrix, index);\n    if (allowedTypes.includes(cell.type)) {\n      if (startIndex && compareIndex(startIndex, index)) {\n        setStartIndex(null);\n        return;\n      }\n  \n      if (!startIndex) setStartIndex(index);\n      else {\n        const startCell = getCell(matrix, startIndex);\n        const finishCell = getCell(matrix, index);\n        if (startCell.color === 'red' && finishCell.color === 'red') {\n          setMatrix(waveAlgorithm(matrix, startIndex, index));\n          setStartIndex(null);\n          setFinishIndex(null);\n        } else {\n          setStartIndex(index);\n          setFinishIndex(null);\n        }\n      }\n    }\n\n  };\n\n  const clear = () => {\n    setMatrix(generateMatrix(sizeX, sizeY));\n    setStartIndex(null);\n    setFinishIndex(null);\n  }\n\n  const [sizeX, setSizeX] = useState(DEFAULT_SIZE_X);\n  const [sizeY, setSizeY] = useState(DEFAULT_SIZE_Y);\n\n  const changeSize = (e: ChangeEvent<HTMLInputElement>) => {\n    const value: number = +e.target.value;\n\n    switch(e.target.name) {\n      case 'x': {\n        const size = Number.isNaN(value) || value < 5 ? 5 : value > 50 ? 50 : value;\n        setSizeX(size);\n        setMatrix(generateMatrix(size, sizeY));\n      }\n      break;\n      case 'y': {\n        const size = Number.isNaN(value) || value < 5 ? 5 : value > 50 ? 50 : value;\n        setSizeY(size);\n        setMatrix(generateMatrix(sizeX, size));\n      }\n      break;\n    }\n  }\n\n  const addScheme = () => {\n    const scheme = getScheme();\n    const matrixBuff = cloneMatrix(matrix);\n\n    try {\n      scheme.forEach((column, columnIndex) => {\n        column.forEach((cell, cellIndex) => {\n          const matrixCell = matrixBuff[columnIndex + startIndex![0]][cellIndex + startIndex![1]];\n          if (matrixCell.type !== 'free' && matrixCell.type !== 'passed') {\n            throw new Error('Недостаточно места для монтирования');\n          }\n          matrixCell.type = cell.type;\n          matrixCell.value = cell.value;\n          matrixCell.color = cell.color;\n        });\n      });\n      setMatrix(matrixBuff);\n    } catch {\n      alert('Недостаточно места для монтирования');\n    }\n\n    setStartIndex(null);\n  }\n\n  return (\n    <div className=\"App-wrapper\">\n      <div className=\"App-sidebar\">\n        <div>\n          <span>Количество колонок (от 5 до 50):</span><br/>\n          <input type=\"number\" value={sizeX} name=\"x\" min=\"5\" max=\"50\" onChange={changeSize} />\n        </div>\n        <div>\n          <span>Количество строк (от 5 до 50):</span><br/>\n          <input type=\"number\" value={sizeY} name=\"y\" min=\"5\" max=\"50\" onChange={changeSize} />\n        </div>\n        <br />\n        <div>\n          <button disabled={!startIndex} onClick={() => addScheme()}>Добавить микросхему</button>\n          <br />\n          <br />\n          <button onClick={() => clear()}>Сбросить</button>\n        </div>\n        <br/>\n      </div>\n      <div className=\"App\">\n        {matrix.map((column, columnIndex) => {\n          return <div className=\"App-column\">\n            {column.map((cell, cellIndex) => {\n              const index: TIndex = [columnIndex, cellIndex];\n              return <div\n                className=\"App-cell\"\n                style={getCellStyles(matrix, index, startIndex, finishIndex)}\n                onClick={() => selectPoint(index)}\n              >{cell.type === 'way-forbidden' ? 'ЭЗ' : cell.type === 'passed' ? cell.value : ''}</div>\n            })}\n          </div>\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import type { TIndex, TWaveAlgorithm } from './models';\nimport { clearMatrixWave, cloneMatrix, compareIndex, getBottomIndex, getCell, getLeftIndex, getRightIndex, getTopIndex } from './helpers';\n\n\n/**\n * Волновой алгоритм поиска кратчайшего пути\n * @param matrix - Исходная матрица\n * @param startIndex - Координаты стартовой ячейки\n * @param finishIndex - Координаты финишной ячейки\n * @returns Массив координат кратчайшего пути\n */\nexport const waveAlgorithm: TWaveAlgorithm = (matrix, startIndex, finishIndex) => {\n    const wavedMatrix = clearMatrixWave(cloneMatrix(matrix));\n    const waveQueue: TIndex[] = [startIndex];\n\n    while(waveQueue.length) {\n        const currentIndex = waveQueue.shift() as TIndex;\n\n        if (compareIndex(currentIndex, finishIndex)) break;\n\n        const currentCell = getCell(wavedMatrix, currentIndex);\n        currentCell.type = 'passed';\n        console.log(currentCell);\n\n        const adjacentIndexes: TIndex[] = [\n            getTopIndex(currentIndex),\n            getBottomIndex(currentIndex),\n            getLeftIndex(currentIndex),\n            getRightIndex(currentIndex),\n        ];\n        \n        const freeIndexes = adjacentIndexes.filter(index => {\n            try {\n                const cell = getCell(wavedMatrix, index);\n                const isFree = cell.type === 'free';\n                if (isFree) {\n                    cell.type = 'passed';\n                    cell.value = currentCell.value + 1;\n                }\n                return isFree;\n            } catch {\n                return false;\n            }\n        });\n        waveQueue.push(...freeIndexes.reverse());\n    }\n\n    const finishCell = getCell(wavedMatrix, finishIndex);\n    const way: TIndex[] = [finishIndex];\n    let currentIndex = finishIndex;\n    while(true) {\n        if (compareIndex(currentIndex, startIndex)) break;\n\n\n        const adjacentIndexes: TIndex[] = [\n            getTopIndex(currentIndex),\n            getBottomIndex(currentIndex),\n            getLeftIndex(currentIndex),\n            getRightIndex(currentIndex),\n        ];\n\n        const passedIndexes = adjacentIndexes.filter(index => {\n            try {\n                const cell = getCell(wavedMatrix, index);\n                return cell.type === 'passed';\n            } catch {\n                return false;\n            }\n        });\n\n        if(!passedIndexes.length) break;\n        else finishCell.type = 'way';\n\n        const [ passedIndex ] = passedIndexes;\n\n        let currentCell = getCell(wavedMatrix, passedIndex);\n        let minIndex = passedIndex;\n\n        for(const index of passedIndexes) {\n            const cell = getCell(wavedMatrix, index);\n            if(cell.value < currentCell.value) {\n                currentCell = cell;\n                minIndex = index;\n            }\n        }\n        currentIndex = minIndex;\n        currentCell.type = 'way';\n        way.push(currentIndex);\n\n    }\n    if (way.length > 1) {\n        way.forEach(wayIndex => {\n            const adjacentIndexes: TIndex[] = [\n                getTopIndex(wayIndex),\n                getBottomIndex(wayIndex),\n                getLeftIndex(wayIndex),\n                getRightIndex(wayIndex),\n            ];\n            adjacentIndexes.forEach(index => {\n                const cell = getCell(wavedMatrix, index);\n                if (cell && (cell.type === 'passed'|| cell.type === 'free')) cell.type = 'way-forbidden';\n            });\n        });\n    }\n\n    return wavedMatrix;\n};\n","import { TMatrix } from '../../../wave-algorithm/models';\n\nexport const getScheme = (): TMatrix => {\n    return [\n        [\n            { type: 'free', value: 0 },\n            { type: 'way-forbidden', value: 0 },\n            { type: 'free', value: 0 },\n            { type: 'way-forbidden', value: 0 },\n            { type: 'free', value: 0 },\n            { type: 'way-forbidden', value: 0 },\n            { type: 'free', value: 0 },\n            { type: 'way-forbidden', value: 0 },\n            { type: 'free', value: 0 },\n            { type: 'way-forbidden', value: 0 },\n            { type: 'free', value: 0 },\n        ],\n        [\n            { type: 'way-forbidden', value: 0 },\n            { type: 'way-forbidden', value: 0 },\n            { type: 'free', value: 0, color: 'red' },\n            { type: 'way-forbidden', value: 0 },\n            { type: 'free', value: 0, color: 'red' },\n            { type: 'way-forbidden', value: 0 },\n            { type: 'free', value: 0, color: 'red' },\n            { type: 'way-forbidden', value: 0 },\n            { type: 'free', value: 0, color: 'red' },\n            { type: 'way-forbidden', value: 0 },\n            { type: 'way-forbidden', value: 0 },\n        ],\n        [\n            { type: 'way-forbidden', value: 0 },\n            { type: 'forbidden', value: 0, color: 'lightblue' },\n            { type: 'forbidden', value: 0, color: 'lightblue' },\n            { type: 'forbidden', value: 0, color: 'lightblue' },\n            { type: 'forbidden', value: 0, color: 'lightblue' },\n            { type: 'forbidden', value: 0, color: 'lightblue' },\n            { type: 'forbidden', value: 0, color: 'lightblue' },\n            { type: 'forbidden', value: 0, color: 'lightblue' },\n            { type: 'forbidden', value: 0, color: 'lightblue' },\n            { type: 'forbidden', value: 0, color: 'lightblue' },\n            { type: 'way-forbidden', value: 0 },\n        ],\n        [\n            { type: 'way-forbidden', value: 0 },\n            { type: 'forbidden', value: 0, color: 'lightblue' },\n            { type: 'forbidden', value: 0, color: 'lightblue' },\n            { type: 'forbidden', value: 0, color: 'lightblue' },\n            { type: 'forbidden', value: 0, color: 'lightblue' },\n            { type: 'forbidden', value: 0, color: 'lightblue' },\n            { type: 'forbidden', value: 0, color: 'lightblue' },\n            { type: 'forbidden', value: 0, color: 'lightblue' },\n            { type: 'forbidden', value: 0, color: 'lightblue' },\n            { type: 'forbidden', value: 0, color: 'lightblue' },\n            { type: 'way-forbidden', value: 0 },\n        ],\n        [\n            { type: 'way-forbidden', value: 0 },\n            { type: 'forbidden', value: 0, color: 'lightblue' },\n            { type: 'forbidden', value: 0, color: 'lightblue' },\n            { type: 'forbidden', value: 0, color: 'lightblue' },\n            { type: 'forbidden', value: 0, color: 'lightblue' },\n            { type: 'forbidden', value: 0, color: 'lightblue' },\n            { type: 'forbidden', value: 0, color: 'lightblue' },\n            { type: 'forbidden', value: 0, color: 'lightblue' },\n            { type: 'forbidden', value: 0, color: 'lightblue' },\n            { type: 'forbidden', value: 0, color: 'lightblue' },\n            { type: 'way-forbidden', value: 0 },\n        ],\n        [\n            { type: 'way-forbidden', value: 0 },\n            { type: 'way-forbidden', value: 0 },\n            { type: 'free', value: 0, color: 'red' },\n            { type: 'way-forbidden', value: 0 },\n            { type: 'free', value: 0, color: 'red' },\n            { type: 'way-forbidden', value: 0 },\n            { type: 'free', value: 0, color: 'red' },\n            { type: 'way-forbidden', value: 0 },\n            { type: 'free', value: 0, color: 'red' },\n            { type: 'way-forbidden', value: 0 },\n            { type: 'way-forbidden', value: 0 },\n        ],\n        [\n            { type: 'free', value: 0 },\n            { type: 'way-forbidden', value: 0 },\n            { type: 'free', value: 0 },\n            { type: 'way-forbidden', value: 0 },\n            { type: 'free', value: 0 },\n            { type: 'way-forbidden', value: 0 },\n            { type: 'free', value: 0 },\n            { type: 'way-forbidden', value: 0 },\n            { type: 'free', value: 0 },\n            { type: 'way-forbidden', value: 0 },\n            { type: 'free', value: 0 },\n        ],\n    ]\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}